#!/usr/bin/env bash
set -euo pipefail

TEST=$1
LOAD_BALANCER=$2
AVAILABILITY_ZONE=$3
DU_DIR=$4
LOG_DIR=$5
DEFAULT_CONF=$DU_DIR/deployment.conf
ENV_CONF=$DU_DIR/$ENVIRONMENT.conf
test -n "$LOAD_BALANCER"
test -n "$DU_DIR"
test -d "$LOG_DIR"
test -f "$DU_DIR/test.conf"
test -f "$DEFAULT_CONF"
test -f "$ENV_CONF"

. $DEFAULT_CONF
. $ENV_CONF
. $DU_DIR/test.conf

# Overwrite LOAD_BALANCER here so we don't have to do it in multiple other places
if [ "$SKIP_LOAD_BALANCER" == true ]
then
  WORKER_NODE=$(cluster-fox kubectl $AVAILABILITY_ZONE -- \
    get nodes --selector='!node-role.kubernetes.io/master' \
    -o jsonpath='{.items[*].status.addresses[?(@.type=="InternalIP")].address}' \
    | cut -d ' ' -f 1)
  LOAD_BALANCER="$WORKER_NODE:30443"
  echo "SKIP_LOAD_BALANCER='true' -- Using worker node ($LOAD_BALANCER) to test instead..."
fi

echo "============================================================"
echo "Running $TEST on $TEST_IMAGE"

echo "---- START TEST LOG ----------------------------------------"
trap onExit EXIT
onExit() {
  echo "---- END TEST LOG ------------------------------------------"
}
docker run \
  --rm \
  --network host \
  --env-file $DU_DIR/$ENVIRONMENT.testvars \
  --env K8S_ENVIRONMENT=$ENVIRONMENT \
  --env K8S_DEPLOYMENT_ID=$K8S_DEPLOYMENT_ID \
  --env K8S_LOAD_BALANCER=$LOAD_BALANCER \
  --env EXIT_STATUS=1 \
  $TEST_IMAGE \
  $TEST \
  | tee $LOG_DIR/$TEST-$AVAILABILITY_ZONE.log

if [ "$TEST" == regression-test -a  "$SIMULATE_REGRESSION_TEST_FAILURE" == true ]
then
  echo "*** SIMULATING REGRESSION TEST FAILURE ***"
  exit 1
fi
