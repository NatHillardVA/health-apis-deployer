#!/usr/bin/env bash
set -euo pipefail

export PATH=$(dirname $(readlink -f $0)):$PATH

usage() {
cat >&2 <<EOF
$0 [options] <command>

Get information about deployment environments

Options
-e, --environment <env>
  The environment name, e.g. qa or staging-lab

Commands
fetch -e <env>
  Print the environment this environment is promoted from.
  For example, production is promoted from staging.
  Root envionrments like "qa" print themselves.

${1:-}
EOF
exit 1
}

main() {
  local environment= product= dir=
  local args
  if ! args=$(getopt \
    -l "debug,environment:,product:,directory:" \
    -o "e:p:d:" -- "$@")
  then usage; fi
  eval set -- "$args"
  while true
  do
    case "$1" in
      --debug) DEBUG=true;;
      -d|--directory) directory="$2";;
      -e|--environment) environment="$2";;
      -p|--product) product="$2";;
      --) shift; break;;
    esac
    shift
  done

  if [ -z "${DEBUG:-}" ]; then DEBUG=false; fi
  if [ "$DEBUG" == "true" ]; then set -x; fi

  if [ $# != 1 ]; then usage "Command not specified"; fi
  local command=$1
  case $command in
    fetch) fetch "${environment:-}" "${product:-}" "${directory:-}";;
    *) usage "Unknown command: $command";;
  esac
}

requireParam() {
  local param="${1}"
  local value="${2:-}"
  if [ -z "$value" ]; then usage "Parameter not specified: $param"; fi
}

fetchFromGithub() {
  local product="$1" dir="$2"
  echo "Fetching product configuration from GitHub"
  local tmpDir=$(mktemp -d -p .)
  trap "rm -rf $tmpDir" EXIT
  cd $tmpDir
  github clone -r health-apis-deployer -d deployer
  cd deployer
  git checkout qa
  copyConfiguration $product $(readlink -f products) $toDir
}

copyConfiguration() {
  local product="$1" fromDir="$2" toDir="$3"
  if [ ! -d $toDir ]; then mkdir -p $toDir; fi
  cp $fromDir/$product.conf $fromDir/$product.yaml $toDir
}

fetch() {
  local environment="${1:-}" product="${2:-}" dir="${3:-}"
  requireParam "environment" "$environment"
  requireParam "product" "$product"
  requireParam "directory" "$dir"
  case $environment in
    qa) fetchFromGithub $product $(readlink -f $dir);;
    *) echo "Unsupported environment: $environment"; exit 1;;
  esac
}


main "$@"
exit 0
