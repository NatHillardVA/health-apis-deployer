#!/usr/bin/env bash
set -euo pipefail

export PATH=$(dirname $(readlink -f $0)):$PATH

usage() {
cat >&2 <<EOF
$0 [options] <command>

Get information about deployment environments

Options
-e, --for-environment <env>
  The environment name, e.g. qa or staging-lab
-d, --directory <dir>
  The directory to place configuration into
-p, --product <name>
  The product name to fetch configuation for

Commands
fetch -e <env> -p <name> -d <dir>
  Fetch the configuration or this product for this environment
  and place it in the directory.
load -d <dir>
  Generate a command used to load deployment unit environments
  specific to the product in the given direcory. Evaluate as follows:
  \$($0 load -d work/product-configuration)

${1:-}
EOF
exit 1
}

main() {
  local environment= product= dir=
  local args
  if ! args=$(getopt \
    -l "debug,environment:,product:,directory:" \
    -o "e:p:d:" -- "$@")
  then usage; fi
  eval set -- "$args"
  while true
  do
    case "$1" in
      --debug) DEBUG=true;;
      -d|--directory) directory="$2";;
      -e|--for-environment) environment="$2";;
      -p|--product) product="$2";;
      --) shift; break;;
    esac
    shift
  done

  if [ -z "${DEBUG:-}" ]; then DEBUG=false; fi
  if [ "$DEBUG" == "true" ]; then set -x; fi

  if [ $# != 1 ]; then usage "Command not specified"; fi
  local command=$1
  case $command in
    fetch) fetch "${environment:-}" "${product:-}" "${directory:-}";;
    load-script) loadScript "${directory:-}";;
    *) usage "Unknown command: $command";;
  esac
}

requireParam() {
  local param="${1}"
  local value="${2:-}"
  if [ -z "$value" ]; then usage "Parameter not specified: $param"; fi
}

fetchFromGithub() {
  local product="$1" dir="$2"
  echo "Fetching product configuration from GitHub"
  local tmpDir=$(mktemp -d -p .)
  trap "rm -rf $tmpDir" EXIT
  cd $tmpDir
  github clone -r health-apis-deployer -d deployer
  cd deployer
  git checkout -q qa
  copyConfiguration $product $(readlink -fm products) $dir
}

copyConfiguration() {
  local product="$1" fromDir="$2" toDir="$3"
  if [ ! -d $toDir ]; then mkdir -p $toDir; fi
  cp $fromDir/$product.yaml $toDir/product.yaml
  cat > $toDir/product.conf <<EOF
echo Loading product configuration
set -euo pipefail
declare -x DU_ARTIFACT
declare -x DU_VERSION
EOF
  cat $fromDir/$product.conf >> $toDir/product.conf
cat >> $toDir/product.conf <<EOF
if [ -z "\${DU_GROUP:-}" ]; then DU_GROUP=gov.va.api.health; fi
if [ -z "\${DU_COORDINATES:-}" ; then DU_COORDINATES="\$DU_GROUP:\$DU_ARTIFACT:tar.gz:product"; fi
echo Done
EOF
  validateConfiguration $toDir/product.conf
}

fail() {
  local msg="$1"
  echo "$msg"
  INVALID_PRODUCT_CONF=true
}

validateConfiguration() {
  local conf="$1"
  echo "Validating product configuration"
  if ! (
      echo before
      . $conf
      echo $? after
      if [ -z "$DU_ARTIFACT" ]; then fail "Missing DU_ARTIFACT"; fi
      if [ -z "$DU_VERSION" ]; then fail "Missing DU_VERSION"; fi
      if [ "${INVALID_PRODUCT_CONF:=false}" == "true" ]
      then
        echo "Invalid product configuration"
        exit 1
      fi
    )
  then
    echo "Failed to load product configuration"
    exit 1
  fi
}

fetch() {
  local environment="${1:-}" product="${2:-}" dir="${3:-}"
  requireParam "for-environment" "$environment"
  requireParam "product" "$product"
  requireParam "directory" "$dir"
  case $environment in
    qa) fetchFromGithub $product $(readlink -fm $dir);;
    *) echo "Unsupported environment: $environment"; exit 1;;
  esac
}


loadScript() {
  local dir="${1:-}"
  requireParam "directory" "$dir"
  local loadScript=$dir/product.conf
  if [ ! -f $loadScript ]; then echo "$loadScript does not exist" > /dev/stderr; exit 1; fi
  echo $loadScript
}

main "$@"
exit 0
