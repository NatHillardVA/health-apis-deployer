#! /usr/bin/env bash

#!/usr/bin/env bash
set -euo pipefail

export PATH=$(dirname $(readlink -f $0))/bin:$PATH

usage() {
cat >&2 <<EOF
$0 [options] <command>

Interact with Jenkins

Options
-j,--jenkins-url <url>
  The base URL of Jenkins. If not specified, JENKINS_URL will be assumed.
-u,--user <user:token>
  Credentials specified as a user name and Jenkins access token.
-o,--github-org <name>
  The GitHub organization name
-r,--github-repo <name>
  The GitHub repository name
-b,--github-branch <name>
  The Github branch name
-p,--parameters <key=value[,key=value,...]>
  CSV of key=value pairs that will be submitted as build parameters

Commands
build [-j <url>] -u <u:t> -o <org> -r <repo> -b <branch> [-p k=v,k=v,...]
  Request a build for GitHub organization, repository, and branch.

${1:-}
EOF
exit 1
}

main() {
  local ghOrg= ghRepo= ghBranch= user= parameters=
  local jenkinsUrl="${JENKINS_URL:-}"
  local args
  if ! args=$(getopt \
    -l "debug,user:,jenkins-url:,github-org:,github-repo:,github-branch:,parameters:" \
    -o "j:u:o:r:b:p:" -- "$@")
  then usage; fi
  eval set -- "$args"
  while true
  do
    case "$1" in
      --debug) DEBUG=true;;
      -o|--github-org) ghOrg="$2";;
      -r|--github-repo) ghRepo="$2";;
      -b|--github-branch) ghBranch="$2";;
      -p|--parameters) parameters="$2";;
      -j|--jenkins-url) jenkinsUrl="$2";;
      -u|--user) user="$2";;
      --) shift; break;;
    esac
    shift
  done

  if [ -z "${DEBUG:-}" ]; then DEBUG=false; fi
  if [ "$DEBUG" == "true" ]; then set -x; fi

  if [ $# != 1 ]; then usage "Command not specified"; fi
  local command=$1
  case $command in
    build)  build "$jenkinsUrl" "$user" "$ghOrg" "$ghRepo" "$ghBranch" "$parameters";;
    *) usage "Unknown command: $command";;
  esac
}

requireParam() {
  local param="${1}"
  local value="${2:-}"
  if [ -z "$value" ]; then usage "Parameter not specified: $param"; fi
}


build() {
  local jenkinsUrl="${1:-}"
  local user="${2:-}"
  local ghOrg="${3:-}"
  local ghRepo="${4:-}"
  local ghBranch="${5:-}"
  local parameters="${6:-}"
  requireParam "jenkins-url" "${jenkinsUrl:-}"
  requireParam "user" "${user:-}"
  requireParam "github-org" "${ghOrg:-}"
  requireParam "github-repo" "${ghRepo:-}"
  requireParam "github-branch" "${ghBranch:-}"

  #
  # The branch could be something like feature/ABC-123 which will need to be
  # encoded to feature%252ABC-123. We'll use this hack with curl to do it.
  #
  local encodedBranch= buildUrl=
  encodedBranch=$(urlEncode "$ghBranch")
  buildUrl="$jenkinsUrl/job/$ghOrg/job/$ghRepo/job/$encodedBranch/build"

  echo "Requesting build $ghOrg/$ghRepo/$ghBranch ..."
  echo "at $buildUrl"
  local result=
  if [ -n "$parameters" ]
  then
    echo "with parameters $parameters"
    if ! result=$(curl -Lsw %{http_code} -o /dev/stderr -u "$user" -X POST $buildUrl \
      --data-urlencode json="$(asJsonPayload $parameters)")
    then
      echo "An error occured request a build"
    fi
  else
    if ! result=$(curl -Lsw %{http_code} -o /dev/stderr -u "$user" -X POST $buildUrl)
    then
      echo "An error occured request a build"
    fi
  fi

  if [ "$result" != 201 ]
  then
    echo "FAILED TO START BUILD"
    echo "REQUESTED: $buildUrl"
    echo "RESULT: ${result:0:100}"
    exit 1
  fi
  echo "Build requested."
}

asJsonPayload() {
  local parameters="$1"
  local json='{parameter:['
  local args=
  local n=1
  for kv in ${parameters//,/ }
  do
    local k=${kv%=*}
    local v=${kv#*=}
    args+=" --arg n$n "
    args+="$k"
    args+=" --arg v$n "
    args+="$v"
    if [ $n -gt 1 ]; then json+=','; fi
    json+="{name: \$n$n, value: \$v$n}"
    let n++
  done
  json+=']}'
  local payload=
  echo {} | jq -c $args ".|$json"
}

urlEncode() {
  local value="$1"
  local result=
  result=$( set +e ; curl -sGo /dev/null -w %{url_effective} --data-urlencode "$value" "" )
  if [ $? != 3 ]; then echo "Failed to encode value" >&2 ; exit 1; fi
  echo "${result##/?}"
}

main "$@"
exit 0
