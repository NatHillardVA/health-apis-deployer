#!/usr/bin/env bash
set -euo pipefail

checkFile() {
  if [ -z "${FILE:-}" ]; then usage "Missing variable FILE or option --file|-f."; fi
  if [ ! -f "$FILE" ]; then usage "File not found: $FILE"; fi
}

checkDirectory() {
  if [ -z "${DIRECTORY:-}" ]; then usage "Missing variable DIRECTORY or option --directory|-d."; fi
  if [ ! -d "$DIRECTORY" ]; then usage "Directory not found: $DIRECTORY"; fi
}

checkPassphrase() {
  if [ -z "${ENCRYPTION_PASSPHRASE:-}" ]
  then
    usage "Missing variable ENCRYPTION_PASSPHRASE or option --encryption-passphrase|-e."
  fi
}

findFiles() {
  find $DIRECTORY -maxdepth 1 -name "*.testvars" -o -name "*.conf" -a -not -name "deployment.conf" -a -not -name "test.conf"
}

encryptAll() {
  for file in $(findFiles)
  do
    echo "Encrypting $file"
    encrypt $file
  done
}

secret() {
  local secret="$@"
  echo -E "$secret" | openssl enc -aes-256-cbc -a -A -nosalt -k "$ENCRYPTION_PASSPHRASE"
}

unsecret() {
  local secret="$@"
  echo -E "$secret" | openssl enc -aes-256-cbc -d -a -A -nosalt -k "$ENCRYPTION_PASSPHRASE"
}

encrypt() {
  local file="$1"
  dos2unix -q $file
  sed -i -e '$a\' $file
  local out=$(mktemp)
  grep -qxF '#encrypted' $file && usage "Error: excessive encrypting, egghead" || grep -qxF '#decrypted' $file || echo '#encrypted' >> $out
  while IFS= read -r line
  do
    if [[ "$line" =~ ^(export )?([-A-Za-z0-9_]+=)(.*) ]]
    then
      local secret=$(secret "${BASH_REMATCH[3]}")
      echo -E "${BASH_REMATCH[1]}${BASH_REMATCH[2]}$secret" >> $out
    elif [[ "$line" =~ ^#decrypted ]]
      then
      echo -E '#encrypted' >> $out
    else
      echo -E "$line" >> $out
    fi
  done < "$file"
   cat $out > "$file"
}

decryptAll() {
  echo "Decrypting .conf and .testvars files..."
  for file in $(findFiles)
  do
    decrypt $file
  done
}

decrypt(){
  local file="$1"
  dos2unix -q $file
  local out=$(mktemp)
    grep -qxF '#decrypted' $file && usage "Don't double decrypt, dummy" || grep -qxF '#encrypted' $file || echo '#decrypted' >> $out
  while IFS= read -r line
  do
    if [[ "$line" =~ ^(export )?([-A-Za-z0-9_]+=)(.*) ]]
    then
      local unsecret=$(unsecret "${BASH_REMATCH[3]}")
      echo -E "${BASH_REMATCH[1]}${BASH_REMATCH[2]}$unsecret" >> $out
    elif [[ "$line" =~ ^#encrypted ]]
      then
      echo -E '#decrypted' >> $out
    else
      echo -E "$line" >> $out
    fi
  done < "$file"
  cat $out > "$file"
  return
}

usage() {
  cat <<EOF
  Perform variable level encryption or decryption. This tool will process shell scripts or Docker
  env files and encrypt variables matching the following pattern:
  ^(export )?([-A-Za-z0-9_]+=)(.*)

  Commands
    encrypt [--file|-f <file>] [--encryption-passphrase|-e <passphrase>]
    decrypt [--file|-f <file>] [--encryption-passphrase|-e <passphrase>]
      Encrypt or decrypt a single file
    encrypt-all [--directory|-d <directory>] [--encryption-passphrase|-e <passphrase>]
    decrypt-all [--directory|-d <directory>] [--encryption-passphrase|-e <passphrase>]
      Encrypt or decrypt a deployment unit directory. Environment conf and testvars files will be processed.

  Example
    encrypt
      --directory=these/are/my/confs
      --encryption-passphrase=shhthesearesecrets

$1
EOF
exit 1
}

ARGS=$(getopt -n $(basename ${0}) \
    -l "directory:,encryption-passphrase:,file:,help" \
    -o "d:e:f:h" -- "$@")


[ $? != 0 ] && usage
eval set -- "$ARGS"
while true
do
  case "$1" in
    -d|--directory) DIRECTORY=${2%/};;
    -e|--encryption-passphrase) ENCRYPTION_PASSPHRASE="$2";;
    -f|--file) FILE=$2;;
    -h|--help) usage;;
    --) shift;break;;
  esac
  shift;
done


[ $# == 0 ] && usage "No command specified"
COMMAND=$1
checkPassphrase
shift
case "$COMMAND" in
  e|encrypt) checkFile && encrypt $FILE;;
  d|decrypt) checkFile && decrypt $FILE;;
  ea|encrypt-all) checkDirectory && encryptAll;;
  da|decrypt-all) checkDirectory && decryptAll;;
  *) usage "Unknown command: $COMMAND";;
esac
