#!/usr/bin/env bash


#
# DELETE ME v
#
echo $PATH
/usr/bin/openssl version
openssl version
#
# DELETE ME ^
#

set -euo pipefail

checkFile() {
  if [ -z "${FILE:-}" ]; then usage "Missing variable FILE or option --file|-f."; fi
  if [ ! -f "$FILE" ]; then usage "File not found: $FILE"; fi
}

checkDirectory() {
  if [ -z "${DIRECTORY:-}" ]; then usage "Missing variable DIRECTORY or option --directory|-d."; fi
  if [ ! -d "$DIRECTORY" ]; then usage "Directory not found: $DIRECTORY"; fi
}

checkPassphrase() {
  if [ -z "${ENCRYPTION_PASSPHRASE:-}" ]
  then
    usage "Missing variable ENCRYPTION_PASSPHRASE or option --encryption-passphrase|-e."
  fi
}


encryptAll() {
  for file in $(find $DIRECTORY -maxdepth 1 -name "*.testvars" -o -name "*.conf" -a -not -name "deployment.conf")
  do
    encrypt $file
  done
}

encrypt() {
  local file="$1"
  awk -v passphrase="$ENCRYPTION_PASSPHRASE" -v FS="\n" '
  REGEX=/^(export )?([-A-Za-z0-9_]+=)(.*)/{
    #Get the variable
    variable=gensub(/^(export )?([-A-Za-z0-9_]+=)(.*)/,"\\1\\2","g",$1)

    #Get the value of the variable
    value=gensub(/^(export )?([-A-Za-z0-9_]+=)(.*)/,"\\3","g",$1)

    # Encrypt the value
    "echo "value"| openssl enc -aes-256-cbc -a -A -nosalt -k "passphrase | getline secret

    #Write the variable with the new encrypted value
    print variable secret
  }
  !REGEX{print}' "$file" > "$file".tmp
  mv "$file".tmp "$file"
}

decryptAll() {
  for file in $(find $DIRECTORY -maxdepth 1 -name "*.testvars" -o -name "*.conf" -a -not -name "deployment.conf")
  do
    decrypt $file
  done
}

decrypt(){
  local file="$1"
  awk -v passphrase="$ENCRYPTION_PASSPHRASE" -v FS="\n" '
  REGEX=/^(export )?([-A-Za-z0-9_]+=)(.*)/{
    #Get the variable
    variable=gensub(/^(export )?([-A-Za-z0-9_]+=)(.*)/,"\\1\\2","g",$1)

    #Get the secret
    secret=gensub(/^(export )?([-A-Za-z0-9_]+=)(.*)/,"\\3","g",$1)

    #Decrypt the secret
    "echo "secret"| openssl enc -aes-256-cbc -d -a -A -nosalt -k "passphrase | getline value

    #Write the variable with the decrypted value
    print variable value
  }
  !REGEX{print}' "$file" > "$file".tmp
  mv "$file".tmp "$file"
}

usage() {
  cat <<EOF
  __________________
  |< Hey! Listen! >|
  ------------------
  .\`.         .\`.
  |  \       /  |
  \`.  \     /  .\`
    \`. \___/ .\`
      /     \\

      .\_ _/.
     \`..\` \`..\`

  Commands
    encrypt [--file|-f <file>] [--encryption-passphrase|-e <passphrase>]
    decrypt [--file|-f <file>] [--encryption-passphrase|-e <passphrase>]
    encrypt-all [--directory|-d <directory>] [--encryption-passphrase|-e <passphrase>]
    decrypt-all [--directory|-d <directory>] [--encryption-passphrase|-e <passphrase>]

  Example
    encrypt
      --directory=these/are/my/confs
      --encryption-passphrase=shhthesearesecrets

$1
EOF
exit 1
}

ARGS=$(getopt -n $(basename ${0}) \
    -l "directory:,encryption-passphrase:,file:,help" \
    -o "d:e:f:h" -- "$@")
[ $? != 0 ] && usage
eval set -- "$ARGS"
while true
do
  case "$1" in
    -d|--directory) DIRECTORY=${2%/};;
    -e|--encryption-passphrase) ENCRYPTION_PASSPHRASE=$2;;
    -f|--file) FILE=$2;;
    -h|--help) usage;;
    --) shift;break;;
  esac
  shift;
done


[ $# == 0 ] && usage "No command specified"
COMMAND=$1
checkPassphrase
shift
case "$COMMAND" in
  e|encrypt) checkFile && encrypt $FILE;;
  d|decrypt) checkFile && decrypt $FILE;;
  ea|encrypt-all) checkDirectory && encryptAll;;
  da|decrypt-all) checkDirectory && decryptAll;;
  *) usage "Unknown command: $COMMAND";;
esac
