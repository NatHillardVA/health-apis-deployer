#!/usr/bin/env bash

set -euo pipefail

#~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~

usage() {
  cat <<EOF
  Perform variable level encryption or decryption. This tool will process shell scripts or Docker
  env files and encrypt variables matching the following pattern:
  ^(export )?([-A-Za-z0-9_]+=)(.*)

  Commands
    encrypt [--file|-f <file>] [--encryption-passphrase|-e <passphrase>]
    decrypt [--file|-f <file>] [--encryption-passphrase|-e <passphrase>]
      Encrypt or decrypt a single file
    encrypt-all [--directory|-d <directory>] [--encryption-passphrase|-e <passphrase>]
    decrypt-all [--directory|-d <directory>] [--encryption-passphrase|-e <passphrase>]
      Encrypt or decrypt a deployment unit directory. Environment conf and testvars files will be processed.

  Example
    encrypt
      --directory=these/are/my/confs
      --encryption-passphrase=shhthesearesecrets

$1
EOF
exit 1
}

#~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~

main() {
  ARGS=$(getopt -n $(basename ${0}) \
    -l "directory:,encryption-passphrase:,file:,help" \
    -o "d:e:f:h" -- "$@")

  [ $? != 0 ] && usage
  eval set -- "$ARGS"
  while true
  do
    case "$1" in
      -d|--directory) DIRECTORY=${2%/};;
      -e|--encryption-passphrase) ENCRYPTION_PASSPHRASE="$2";;
      -f|--file) FILE=$2;;
      -h|--help) usage;;
      --) shift;break;;
    esac
    shift;
  done


  [ $# == 0 ] && usage "No command specified"
  COMMAND=$1
  checkPassphrase
  shift
  case "$COMMAND" in
    e|encrypt) checkFile && encrypt $FILE;;
    d|decrypt) checkFile && decrypt $FILE;;
    ea|encrypt-all) checkDirectory && allFiles encrypt;;
    da|decrypt-all) checkDirectory && allFiles decrypt;;
    *) usage "Unknown command: $COMMAND";;
  esac
}

#~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~

allFiles() {
  local action
  case "$1" in
    encrypt) action="encrypt"; shift;;
    decrypt) action="decrypt"; shift;;
    *) usage "Action Required!";;
  esac

  echo "${action}ing .conf and .testvars files..."
  for file in $(findFiles)
  do
    echo "${action}ing $file"
    $action $file
  done
}

checkFile() {
  if [ -z "${FILE:-}" ]; then usage "Missing variable FILE or option --file|-f."; fi
  if [ ! -f "$FILE" ]; then usage "File not found: $FILE"; fi
}

checkDirectory() {
  if [ -z "${DIRECTORY:-}" ]; then usage "Missing variable DIRECTORY or option --directory|-d."; fi
  if [ ! -d "$DIRECTORY" ]; then usage "Directory not found: $DIRECTORY"; fi
}

checkPassphrase() {
  if [ -z "${ENCRYPTION_PASSPHRASE:-}" ]
  then
    usage "Missing variable ENCRYPTION_PASSPHRASE or option --encryption-passphrase|-e."
  fi
}

findFiles() {
  find $DIRECTORY -maxdepth 1 -name "*.testvars" -o -name "*.conf" -a -not -name "deployment.conf" -a -not -name "test.conf"
}

encryption() {
  local opensslOpts
  case "$1" in
    encrypt) opensslOpts="-e"; shift;;
    decrypt) opensslOpts="-d"; shift;;
  esac

  local secret="$@"
  local finalValue
  finalValue=$(echo -E "$secret" \
                   | openssl enc -aes-256-cbc \
                             -md md5 -pbkdf2 -iter 1000 \
                             -a -A -nosalt ${opensslOpts:-} \
                             -k "$ENCRYPTION_PASSPHRASE")

  if [ "$?" != 0 ] && [ "$opensslOpts" == "-d" ]; then
    finalValue=$(echo -E "$secret" | openssl enc -aes-256-cbc -md md5 -a -A -nosalt -k "$ENCRYPTION_PASSPHRASE" -d) 
  fi
  echo $finalValue
}

encrypt() {
  local file="$1"
  dos2unix -q $file
  sed -i -e '$a\' $file
  local out=$(mktemp)
  grep -qxF '#encrypted' $file && usage "Error: excessive encrypting, egghead" || grep -qxF '#decrypted' $file || echo '#encrypted' >> $out
  while IFS= read -r line
  do
    if [[ "$line" =~ ^(export )?([-A-Za-z0-9_]+=)(.*) ]]
    then
      local secret=$(encryption encrypt "${BASH_REMATCH[3]}")
      echo -E "${BASH_REMATCH[1]}${BASH_REMATCH[2]}$secret" >> $out
    elif [[ "$line" =~ ^#decrypted ]]
      then
      echo -E '#encrypted' >> $out
    else
      echo -E "$line" >> $out
    fi
  done < "$file"
   cat $out > "$file"
}

decrypt(){
  local file="$1"
  dos2unix -q $file
  local out=$(mktemp)
    grep -qxF '#decrypted' $file && usage "Don't double decrypt, dummy" || grep -qxF '#encrypted' $file || echo '#decrypted' >> $out
  while IFS= read -r line
  do
    if [[ "$line" =~ ^(export )?([-A-Za-z0-9_]+=)(.*) ]]
    then
      local unsecret=$(encryption decrypt "${BASH_REMATCH[3]}")
      echo -E "${BASH_REMATCH[1]}${BASH_REMATCH[2]}$unsecret" >> $out
    elif [[ "$line" =~ ^#encrypted ]]
      then
      echo -E '#decrypted' >> $out
    else
      echo -E "$line" >> $out
    fi
  done < "$file"
  cat $out > "$file"
  return
}

#~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~

main $@
